{"version":3,"sources":["fbase.js","components/AuthForm.js","routes/Auth.js","components/Twit.js","components/TwitFactory.js","routes/Home.js","components/Navigation.js","routes/Profile.js","components/Router.js","components/App.js","index.js"],"names":["firebase","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firebaseInstance","authService","dbService","storageService","AuthForm","useState","email","setEmail","password","setPassword","newAccount","setNewAccount","error","setError","onChange","e","target","name","value","onSubmit","a","preventDefault","createUserWithEmailAndPassword","signInWithEmailAndPassword","message","className","type","placeholder","required","onClick","prev","Auth","onSocialClick","provider","auth","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","icon","faTwitter","color","size","style","marginBottom","faGoogle","faGithub","Twit","twitObj","isOwner","editing","setEditing","text","newTwit","setNewTwit","onDeleteClick","window","confirm","doc","id","delete","refFromURL","attachmentUrl","toggleEditing","update","autoFocus","src","alt","faTrash","faPencilAlt","TwitFactory","userObj","twit","setTwit","attachment","setAttachment","fileRef","ref","child","uid","uuidv4","putString","response","getDownloadURL","createdAt","Date","now","creatorId","collection","add","maxLength","htmlFor","faPlus","accept","theFile","files","reader","FileReader","onloadend","finishedEvent","result","currentTarget","readAsDataURL","opacity","background","faTimes","Home","twits","setTwits","useEffect","onSnapshot","snapshot","twitArray","docs","map","data","marginTop","key","Navigation","display","justifyContent","to","marginRight","marginLeft","flexDirection","alignItems","fontSize","faUser","displayName","Profile","refreshUser","newDisplayName","setNewDisplayName","history","useHistory","updateProfile","signOut","push","AppRouter","isLoggedIn","maxWidth","width","margin","exact","path","App","init","setInit","setUserObj","onAuthStateChanged","user","args","currentUser","Boolean","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8d15bfcc.chunk.js","sourcesContent":["import * as firebase from 'firebase/app';\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nimport \"firebase/storage\";\n\nconst firebaseConfig = {\n    apiKey: process.env.REACT_APP_API_KEY,\n    authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n    databaseURL: process.env.REACT_APP_DATABASE_URL,\n    projectId: process.env.REACT_APP_PROJECT_ID,\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n    messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n    appId: process.env.REACT_APP_APP_ID\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nexport const firebaseInstance = firebase;\nexport const authService = firebase.auth(); \nexport const dbService = firebase.firestore();\nexport const storageService = firebase.storage();","import React, { useState } from 'react'\nimport { authService } from 'fbase';\n\nconst inputStyles = {};\n\nexport default function AuthForm() {\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const [newAccount, setNewAccount] = useState(true);\n    const [error, setError] = useState(\"\");\n\n    const onChange = e => {\n        const { target: { name, value }} = e;\n        if (name === 'email') {\n            setEmail(value);\n        } else if (name === 'password') {\n            setPassword(value);\n        }\n    }\n    const onSubmit = async e => {\n        e.preventDefault();\n\n        try {\n            let data;\n            if (newAccount) {\n                // create account\n                data = await authService.createUserWithEmailAndPassword(email, password);\n            } else {\n                // login\n                data = await authService.signInWithEmailAndPassword(email, password);\n            }\n        } catch (e) {\n            setError(e.message);\n        }\n    }\n\n    const toggleAccount = () => setNewAccount(prev => !prev);\n\n    return (\n        <>\n            <form onSubmit={onSubmit} className=\"container\">\n                <input\n                    name=\"email\"\n                    type=\"text\"\n                    placeholder=\"Email\"\n                    required\n                    value={email}\n                    onChange={onChange}\n                    className=\"authInput\"\n                />\n                <input\n                    name=\"password\"\n                    type=\"password\"\n                    placeholder=\"Password\"\n                    required\n                    value={password}\n                    onChange={onChange}\n                    className=\"authInput\"\n                />\n                <input\n                    type=\"submit\"\n                    value={newAccount ? \"Create Account\" : \"Sign In\"}\n                    className=\"authInput authSubmit\"\n                />\n                {error && <span className=\"authError\">{error}</span>}\n            </form>\n            <span onClick={toggleAccount} className=\"authSwitch\">\n                {newAccount ? \"Sign in\" : \"Create Account\" }\n            </span>\n        </>\n    )\n}\n","import AuthForm from 'components/AuthForm';\nimport { authService, firebaseInstance } from 'fbase';\nimport React from 'react'\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faTwitter,\n  faGoogle,\n  faGithub,\n} from \"@fortawesome/free-brands-svg-icons\";\n\nexport default function Auth() {\n    const onSocialClick = async e => {\n        const { target: { name }} = e;\n        let provider;\n        if (name === 'google') {\n            provider = new firebaseInstance.auth.GoogleAuthProvider();\n        } else if (name === 'github') {\n            provider = new firebaseInstance.auth.GithubAuthProvider();\n        }\n        await authService.signInWithPopup(provider);\n    }\n\n    return (\n        <div className=\"authContainer\">\n            <FontAwesomeIcon\n                icon={faTwitter}\n                color={\"#04AAFF\"}\n                size=\"3x\"\n                style={{ marginBottom: 30 }}\n            />\n            <AuthForm />\n            <div className=\"authBtns\">\n                <button onClick={onSocialClick} name=\"google\" className=\"authBtn\">\n                    Continue with Google <FontAwesomeIcon icon={faGoogle} />\n                </button>\n                <button onClick={onSocialClick} name=\"github\" className=\"authBtn\">\n                    Continue with Github <FontAwesomeIcon icon={faGithub} />\n                </button>            \n            </div>\n        </div>\n    )\n}\n","import { dbService, storageService } from 'fbase';\nimport React, { useState } from 'react'\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTrash, faPencilAlt } from \"@fortawesome/free-solid-svg-icons\";\n\nexport default function Twit({ twitObj, isOwner }) {\n    const [editing, setEditing] = useState(false);\n    const [newTwit, setNewTwit] = useState(twitObj.text);\n\n    const onDeleteClick = async () => {\n        const ok = window.confirm(\"Are you sure you want to delete this twit?\");\n        if (ok) {\n            await dbService.doc(`twits/${twitObj.id}`).delete();\n            await storageService.refFromURL(twitObj.attachmentUrl).delete();\n        }\n    }\n\n    const toggleEditing = () => {\n        setEditing(prev => !prev);\n    }\n\n    const onSubmit = async e => {\n        e.preventDefault();\n        await dbService.doc(`twits/${twitObj.id}`).update({\n            text: newTwit\n        });\n        setEditing(false);\n    }\n\n    const onChange = e => {\n        const { target: { value }} = e;\n        setNewTwit(value);\n    }\n\n    return (\n        <div className=\"twit\">\n            {\n                editing ? (\n                    <>\n                        {isOwner && \n                            <>\n                                <form onSubmit={onSubmit} className=\"container twitEdit\">\n                                    <input\n                                        type=\"text\"\n                                        value={newTwit}\n                                        placeholder=\"Edit twit\"\n                                        onChange={onChange}\n                                        autoFocus\n                                        required\n                                        className=\"formInput\"\n                                    />\n                                    <input\n                                        type=\"submit\"\n                                        value=\"Update twit\"\n                                        className=\"formBtn\"\n                                    />\n                                </form>\n                                <span onClick={toggleEditing} className=\"formBtn cancelBtn\">\n                                    Cancel\n                                </span>\n                            </>\n                        }\n                    </>\n                ) : (\n                    <>\n                        <h4>{twitObj.text}</h4>\n                        {twitObj.attachmentUrl && <img src={twitObj.attachmentUrl} alt=\"\" />}\n                        {isOwner && (\n                            <div className=\"twit__actions\">\n                                <span onClick={onDeleteClick}>\n                                    <FontAwesomeIcon icon={faTrash} />\n                                </span>\n                                <span onClick={toggleEditing}>\n                                    <FontAwesomeIcon icon={faPencilAlt} />\n                                </span>\n                            </div>\n                        )}\n                    </>\n                )\n            }\n        </div>\n    )\n}\n","import React, { useState } from 'react'\nimport { dbService, storageService } from 'fbase';\nimport { v4 as uuidv4 } from 'uuid';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus, faTimes } from \"@fortawesome/free-solid-svg-icons\";\n\nexport default function TwitFactory({ userObj }) {\n    const [twit, setTwit] = useState(\"\");\n    const [attachment, setAttachment] = useState(\"\");\n\n    const onSubmit = async e => {\n        if (twit === \"\") {\n            return ;\n        }\n        e.preventDefault();\n        let attachmentUrl = \"\";\n        if (attachment !== \"\") {\n            const fileRef = storageService.ref().child(`${userObj.uid}/${uuidv4()}`);\n            const response = await fileRef.putString(attachment, \"data_url\");\n            attachmentUrl = await response.ref.getDownloadURL();\n        }\n        const twitObj = {\n            text: twit,\n            createdAt: Date.now(),\n            creatorId: userObj.uid,\n            attachmentUrl\n        }\n        await dbService.collection(\"twits\").add(twitObj);\n        setTwit(\"\");\n        setAttachment(\"\");\n    }\n    \n    const onChange = e => {\n        const { target: { value }} = e;\n        setTwit(value);\n    }\n\n    const onFileChange = e => {\n        const { target: { files }} = e;\n        const theFile = files[0];\n        const reader = new FileReader(); // file api\n        reader.onloadend = (finishedEvent) => {\n            const { currentTarget: { result }} = finishedEvent;\n            setAttachment(result);\n        }\n        reader.readAsDataURL(theFile);\n    }\n\n    const onClearAttachment = () => setAttachment(\"\");\n\n    return (\n        <form onSubmit={onSubmit} className=\"factoryForm\">\n            <div className=\"factoryInput__container\">\n                <input\n                    className=\"factoryInput__input\"\n                    value={twit}\n                    onChange={onChange}\n                    type=\"text\"\n                    placeholder=\"What's on your mind?\"\n                    maxLength={120}\n                />\n                <input\n                    type=\"submit\"\n                    value=\"&rarr;\"\n                    className=\"factoryInput__arrow\"\n                />\n            </div>\n            <label htmlFor=\"attach-file\" className=\"factoryInput__label\">\n                <span>Add photos</span>\n                <FontAwesomeIcon icon={faPlus} />\n            </label>\n            <input\n                id=\"attach-file\"\n                type=\"file\"\n                accept=\"image/*\"\n                onChange={onFileChange}\n                style={{\n                    opacity: 0\n                }}\n            />\n            {attachment && (\n                <div className=\"factoryForm__attachment\">\n                    <img\n                        src={attachment}\n                        alt=\"\"\n                        style={{\n                            background: attachment\n                        }}\n                    />\n                    <div className=\"factoryForm__clear\" onClick={onClearAttachment}>\n                        <span>Remove</span>\n                        <FontAwesomeIcon icon={faTimes} />\n                    </div>                    \n                </div>\n            )}\n        </form>\n    )\n}\n","import Twit from 'components/Twit';\nimport TwitFactory from 'components/TwitFactory';\nimport { dbService } from 'fbase';\nimport React, { useState, useEffect } from 'react'\n\nexport default function Home({ userObj }) {\n    const [twits, setTwits] = useState([]);\n    /*\n    실시간 아님, 좀 오래된 방식\n    \n    const getTwits = async () => {\n        const dbTwits = await dbService.collection(\"twits\").get();\n        dbTwits.forEach(document => {\n            const twitObj = {\n                ...document.data(),\n                id: document.id\n            }\n            setTwits(prev => [twitObj, ...prev]);\n        });\n    }\n    */\n    \n    useEffect(() => {\n        // getTwits();\n        dbService.collection(\"twits\").onSnapshot(snapshot => {\n            const twitArray = snapshot.docs.map(doc => ({ \n                id: doc.id,\n                ...doc.data()\n            }));\n            setTwits(twitArray);\n        })\n    }, []);    \n\n    return (\n        <div className=\"container\">\n            <TwitFactory userObj={userObj} />\n            <div style={{ marginTop: 30 }}>\n                {twits.map(twit => (\n                    <Twit\n                        key={twit.id}\n                        twitObj={twit}\n                        isOwner={twit.creatorId === userObj.uid}\n                    />\n                ))}\n            </div>\n        </div>\n    )\n}\n","import React from 'react'\nimport { Link } from 'react-router-dom';\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\nimport { faUser } from \"@fortawesome/free-solid-svg-icons\";\n\nexport default function Navigation({ userObj }) {\n    return (\n        <nav>\n            <ul style={{ display: \"flex\", justifyContent: \"center\", marginTop: 50 }}>\n                <li>\n                    <Link to=\"/\" style={{ marginRight: 10 }}>\n                        <FontAwesomeIcon icon={faTwitter} color={\"#04AAFF\"} size=\"2x\" />\n                    </Link>\n                </li>\n                <li>\n                    <Link\n                        to=\"/profile\"\n                        style={{\n                            marginLeft: 10,\n                            display: \"flex\",\n                            flexDirection: \"column\",\n                            alignItems: \"center\",\n                            fontSize: 12,\n                        }}>\n                        <FontAwesomeIcon icon={faUser} color={\"#04AAFF\"} size=\"2x\" />\n                        <span style={{ marginTop: 10 }}>\n                            {userObj.displayName\n                                ? `${userObj.displayName}의 Profile`\n                                : \"Profile\"}\n                        </span>\n                    </Link>\n                </li>\n            </ul>\n        </nav>\n    )\n}\n","import { authService, dbService } from 'fbase'\nimport React, { useState } from 'react'\nimport { useHistory } from 'react-router-dom';\n\nexport default function Profile({ refreshUser, userObj }) {\n    const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\n    const history = useHistory();\n    const onLogOutClick = () => {\n        authService.signOut();\n        history.push(\"/\");\n    }\n\n    // 내 트윗 가져오기\n    const getMyTwits = async () => {\n        const twits = dbService\n            .collection(\"twits\")\n            .where(\"creatorId\", \"==\", userObj.uid)\n            .orderBy(\"createdAt\")\n            .get();\n    }\n\n    const onChange = e => {\n        const { target: { value }} = e;\n        setNewDisplayName(value);\n    }\n\n    const onSubmit = async e => {\n        e.preventDefault();\n        if (userObj.displayName !== newDisplayName) {\n            await userObj.updateProfile({\n                displayName: newDisplayName\n            });\n            refreshUser();\n        }\n    }\n    return (\n        <div className=\"container\">\n            <form onSubmit={onSubmit} className=\"profileForm\">\n                <input\n                    type=\"text\"\n                    placeholder=\"Display name\"\n                    onChange={onChange}\n                    value={newDisplayName}\n                    autoFocus\n                    className=\"formInput\"\n                />\n                <input\n                    type=\"submit\"\n                    value=\"Update Profile\"\n                    className=\"formBtn\"\n                    style={{\n                        marginTop: 10,\n                    }}\n                />\n            </form>\n            <span className=\"formBtn cancelBtn logOut\" onClick={onLogOutClick}>\n                Log Out\n            </span>\n        </div>\n    )\n}\n","import React from 'react';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\nimport Auth from 'routes/Auth';\nimport Home from 'routes/Home';\nimport Navigation from 'components/Navigation';\nimport Profile from 'routes/Profile';\n\nconst AppRouter = ({ refreshUser, isLoggedIn, userObj }) => {\n    return (\n        <Router>\n            {isLoggedIn && <Navigation userObj={userObj} />}\n            <Switch>\n                {isLoggedIn ? (\n                    <>\n                        <div\n                            style={{\n                                maxWidth: 890,\n                                width: \"100%\",\n                                margin: \"0 auto\",\n                                marginTop: 80,\n                                display: \"flex\",\n                                justifyContent: \"center\",\n                            }}\n                        >\n                            <Route exact path=\"/\">\n                                <Home userObj={userObj} />\n                            </Route>\n                            <Route exact path=\"/profile\">\n                                <Profile userObj={userObj} refreshUser={refreshUser} />\n                            </Route>\n                        </div>\n                    </>\n                ) : (\n                    <>\n                        <Route exact path=\"/\">\n                            <Auth />\n                        </Route>\n                    </>\n                )}\n            </Switch>\n        </Router>\n    );\n};\n\nexport default AppRouter;","import React, { useState, useEffect } from 'react';\nimport AppRouter from 'components/Router';\nimport { authService } from 'fbase';\n\nfunction App() {\n    const [init, setInit] = useState(false);\n    const [userObj, setUserObj] = useState(null);\n\n    useEffect(() => {\n        authService.onAuthStateChanged(user => {\n            if (user) {\n                // 1번\n                // setUserObj(user);\n                // 2번\n                setUserObj({\n                    displayName: user.displayName,\n                    uid: user.uid,\n                    updateProfile: (args) => user.updateProfile(args)\n                });\n            } else {\n                setUserObj(null);\n            }\n            setInit(true);\n        });\n    }, []);\n\n    const refreshUser = () => {\n        const user = authService.currentUser;\n        // 1번\n        // setUserObj(Object.assign({}, user));\n        // 2번\n        setUserObj({\n            displayName: user.displayName,\n            uid: user.uid,\n            updateProfile: (args) => user.updateProfile(args)\n        });\n    }\n    \n    return (\n        <>\n            {init\n                ? (\n                    <AppRouter\n                        refreshUser={refreshUser}\n                        isLoggedIn={Boolean(userObj)}\n                        userObj={userObj}\n                    />\n                ) : \"Initializing...\"\n            }\n            {/* <footer>&copy; {new Date().getFullYear()} twitter is a waste of time</footer> */}\n        </>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'components/App';\nimport './style.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);"],"sourceRoot":""}